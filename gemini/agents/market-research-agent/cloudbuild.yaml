steps:
  # Step 1: Enable required APIs
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    args:
      - 'services'
      - 'enable'
      - 'run.googleapis.com'
      - 'cloudbuild.googleapis.com'
      - 'aiplatform.googleapis.com'
    timeout: '300s'

  # Step 2: Create service account if it doesn't exist
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-service-account'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SA_NAME="market-analyst-sa"
        SA_EMAIL="$SA_NAME@$PROJECT_ID.iam.gserviceaccount.com"
        
        if gcloud iam service-accounts describe $SA_EMAIL 2>/dev/null; then
            echo "‚úÖ Service account already exists."
        else
            echo "üîß Creating service account..."
            gcloud iam service-accounts create $SA_NAME \
                --display-name="Market Analyst Service Account"
            
            # Grant necessary permissions
            gcloud projects add-iam-policy-binding $PROJECT_ID \
                --member="serviceAccount:$SA_EMAIL" \
                --role="roles/aiplatform.user" --quiet
        fi
    timeout: '180s'

  # Step 3: Build and push backend image using gcloud builds submit (your preferred method)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'build-push-backend'
    dir: 'backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        SERVICE_NAME="market-analyst-backend"
        IMAGE_NAME="gcr.io/$PROJECT_ID/$SERVICE_NAME:$TIMESTAMP"
        
        echo "üî® Building and pushing container image: $IMAGE_NAME"
        gcloud builds submit --tag $IMAGE_NAME
        
        # Save image name for next step
        echo $IMAGE_NAME > /workspace/backend_image.txt
        echo $SERVICE_NAME > /workspace/backend_service.txt
    timeout: '900s'

  # Step 4: Deploy backend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        IMAGE_NAME=$(cat /workspace/backend_image.txt)
        SERVICE_NAME=$(cat /workspace/backend_service.txt)
        SA_EMAIL="market-analyst-sa@$PROJECT_ID.iam.gserviceaccount.com"
        
        echo "üöÄ Deploying to Cloud Run: $SERVICE_NAME"
        gcloud run deploy $SERVICE_NAME \
          --image $IMAGE_NAME \
          --platform managed \
          --region us-central1 \
          --memory 2Gi \
          --cpu 2 \
          --timeout 900 \
          --min-instances 0 \
          --max-instances 5 \
          --port 8000 \
          --set-env-vars="GEMINI_API_KEY=${_GEMINI_API_KEY},SERPAPI_KEY=${_SERPAPI_KEY},GOOGLE_CLOUD_PROJECT_ID=$PROJECT_ID,ENVIRONMENT=production" \
          --service-account $SA_EMAIL \
          --allow-unauthenticated
    timeout: '600s'

  # Step 5: Get backend URL
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-backend-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_NAME=$(cat /workspace/backend_service.txt)
        BACKEND_URL=$(gcloud run services describe $SERVICE_NAME \
          --region us-central1 \
          --format="value(status.url)")
        
        echo "‚úÖ Backend deployed successfully!"
        echo "üìç Backend URL: $BACKEND_URL"
        echo "üè• Health Check: $BACKEND_URL/health"
        
        # Save for frontend deployment
        echo $BACKEND_URL > /workspace/backend_url.txt
        
        # Test backend health
        echo "üîç Testing backend health..."
        curl -f "$BACKEND_URL/health" || echo "‚ö†Ô∏è Health check failed, but continuing..."
    timeout: '300s'

  # Step 6: Install frontend dependencies
  - name: 'node:18'
    id: 'install-frontend-deps'
    dir: 'client'
    entrypoint: 'npm'
    args: ['ci']
    timeout: '600s'
  
  # Step 7: Build and push frontend image using gcloud builds submit
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'build-push-frontend'
    dir: 'client'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(cat /workspace/backend_url.txt)
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        SERVICE_NAME="market-analyst-frontend"
        IMAGE_NAME="gcr.io/$PROJECT_ID/$SERVICE_NAME:$TIMESTAMP"
        
        # Create environment file for frontend
        echo "NEXT_PUBLIC_API_URL=$BACKEND_URL" > .env.production
        
        # Create Dockerfile if it doesn't exist
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        FROM node:18-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        COPY . .
        RUN npm run build
        EXPOSE 3000
        CMD ["npm", "start"]
        EOF
        fi
        
        echo "üî® Building and pushing frontend image: $IMAGE_NAME"
        gcloud builds submit --tag $IMAGE_NAME
        
        # Save image name for next step
        echo $IMAGE_NAME > /workspace/frontend_image.txt
        echo $SERVICE_NAME > /workspace/frontend_service.txt
    timeout: '900s'

  # Step 8: Deploy frontend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        IMAGE_NAME=$(cat /workspace/frontend_image.txt)
        SERVICE_NAME=$(cat /workspace/frontend_service.txt)
        
        echo "üöÄ Deploying frontend to Cloud Run: $SERVICE_NAME"
        gcloud run deploy $SERVICE_NAME \
          --image $IMAGE_NAME \
          --platform managed \
          --region us-central1 \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300 \
          --min-instances 0 \
          --max-instances 3 \
          --port 3000 \
          --allow-unauthenticated
    timeout: '600s'

  # Step 9: Final verification and output
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'final-verification'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_SERVICE=$(cat /workspace/backend_service.txt)
        FRONTEND_SERVICE=$(cat /workspace/frontend_service.txt)
        
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE \
          --region us-central1 --format="value(status.url)")
        
        FRONTEND_URL=$(gcloud run services describe $FRONTEND_SERVICE \
          --region us-central1 --format="value(status.url)")
        
        echo ""
        echo "üéâ =================================="
        echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "üéâ =================================="
        echo ""
        echo "üìç Backend URL: $BACKEND_URL"
        echo "üåê Frontend URL: $FRONTEND_URL"
        echo "üè• Health Check: $BACKEND_URL/health"
        echo ""
        echo "üß™ Test your deployment:"
        echo "curl $BACKEND_URL/health"
        echo ""
        echo "üîß To update environment variables later:"
        echo "gcloud run services update $BACKEND_SERVICE \\"
        echo "  --set-env-vars=\"NEW_VAR=value\" \\"
        echo "  --region=us-central1"
    timeout: '60s'

# Required substitution variables
substitutions:
  _GEMINI_API_KEY: ''     # Set this in your Cloud Build trigger
  _SERPAPI_KEY: ''        # Set this in your Cloud Build trigger

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Optional: Define build timeout
timeout: '3600s'