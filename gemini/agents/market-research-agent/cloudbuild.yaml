steps:
  # Step 1: Enable required APIs
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'enable-apis'
    args:
      - 'services'
      - 'enable'
      - 'run.googleapis.com'
      - 'cloudbuild.googleapis.com'
      - 'iam.googleapis.com'
      - 'aiplatform.googleapis.com'
      - 'firebase.googleapis.com'
    timeout: '300s'

  # Step 2: Create service account if it doesn't exist
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-service-account'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SA_NAME="market-analyst-sa"
        SA_EMAIL="$SA_NAME@$PROJECT_ID.iam.gserviceaccount.com"
        
        echo "Checking if service account exists..."
        if gcloud iam service-accounts describe $SA_EMAIL 2>/dev/null; then
            echo "✅ Service account $SA_EMAIL already exists."
        else
            echo "🔧 Creating service account $SA_EMAIL..."
            gcloud iam service-accounts create $SA_NAME \
                --display-name="Market Analyst Service Account" \
                --description="Service account for Market Analyst application"
            echo "✅ Service account created successfully!"
        fi
    timeout: '120s'

  # Step 3: Grant necessary permissions to service account
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'grant-permissions'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SA_EMAIL="market-analyst-sa@$PROJECT_ID.iam.gserviceaccount.com"
        
        echo "🔐 Granting necessary permissions to service account..."
        
        # Cloud Run Invoker role
        gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:$SA_EMAIL" \
            --role="roles/run.invoker" \
            --quiet
        
        # Storage Object Viewer
        gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:$SA_EMAIL" \
            --role="roles/storage.objectViewer" \
            --quiet
        
        # Vertex AI User (for Gemini)
        gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:$SA_EMAIL" \
            --role="roles/aiplatform.user" \
            --quiet
        
        # Logging Writer (for application logs)
        gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:$SA_EMAIL" \
            --role="roles/logging.logWriter" \
            --quiet
        
        # Monitoring Metric Writer (for custom metrics)
        gcloud projects add-iam-policy-binding $PROJECT_ID \
            --member="serviceAccount:$SA_EMAIL" \
            --role="roles/monitoring.metricWriter" \
            --quiet
        
        echo "✅ All permissions granted successfully!"
    timeout: '300s'

  - name: 'gcr.io/buildpacks/pack'
    id: 'buildpacks-build'
    dir: 'backend'
    entrypoint: 'pack'
    args:
      - 'build'
      - 'gcr.io/$PROJECT_ID/market-analyst-backend:$BUILD_ID'
      - '--builder'
      - 'gcr.io/buildpacks/builder:latest'
      - '--publish'

  # Step 6: Deploy backend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    args:
      - 'run'
      - 'deploy'
      - 'market-analyst-backend'
      - '--image=gcr.io/$PROJECT_ID/market-analyst-backend:$BUILD_ID'
      - '--region=us-central1'
      - '--allow-unauthenticated'
      - '--port=8000'
      - '--memory=2Gi'
      - '--cpu=2'
      - '--min-instances=0'
      - '--max-instances=5'
      - '--timeout=900'
      - '--set-env-vars=GEMINI_API_KEY=${_GEMINI_API_KEY},SERPAPI_KEY=${_SERPAPI_KEY},GOOGLE_CLOUD_PROJECT_ID=$PROJECT_ID,ENVIRONMENT=production'
      - '--service-account=market-analyst-sa@$PROJECT_ID.iam.gserviceaccount.com'
      - '--execution-environment=gen2'
      - '--ingress=all'
    timeout: '600s'

  # Step 7: Wait for deployment and get backend URL
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-backend-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "⏳ Waiting for backend service to be ready..."
        gcloud run services wait market-analyst-backend --region=us-central1 --quiet
        
        # Get the service URL
        BACKEND_URL=$(gcloud run services describe market-analyst-backend \
          --region=us-central1 \
          --format="value(status.url)")
        
        echo "🚀 Backend deployed successfully!"
        echo "📍 Backend URL: $BACKEND_URL"
        echo $BACKEND_URL > /workspace/backend_url.txt
        
        # Test the backend health endpoint
        echo "🔍 Testing backend health..."
        curl -f "$BACKEND_URL/health" || echo "⚠️  Health check failed, but continuing..."
    timeout: '300s'

  # Step 8: Install frontend dependencies
  - name: 'node:18'
    id: 'install-frontend-deps'
    dir: 'client'
    entrypoint: 'npm'
    args: ['ci', '--only=production']
    timeout: '600s'
  
  # Step 9: Build frontend with backend URL
  - name: 'node:18'
    id: 'build-frontend'
    dir: 'client'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Read backend URL
        BACKEND_URL=$(cat /workspace/backend_url.txt)
        echo "🔧 Building frontend with backend URL: $BACKEND_URL"
        
        # Set environment variable and build
        export NEXT_PUBLIC_API_URL=$BACKEND_URL
        
        # Verify environment variable is set
        echo "✅ NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL"
        
        # Build the application
        npm run build
        
        echo "✅ Frontend build completed successfully!"
    timeout: '600s'
    
  # Step 10: Deploy frontend to Firebase Hosting
  - name: 'node:18'
    id: 'deploy-frontend'
    dir: 'client'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🔧 Installing Firebase CLI..."
        npm install -g firebase-tools
        
        echo "🚀 Deploying to Firebase Hosting..."
        firebase deploy --only hosting --project $PROJECT_ID --token ${_FIREBASE_TOKEN} --non-interactive
        
        echo "✅ Frontend deployed successfully!"
    timeout: '600s'

  # Step 11: Final verification and output
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'final-verification'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(cat /workspace/backend_url.txt)
        
        echo ""
        echo "🎉 =================================="
        echo "🎉 DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "🎉 =================================="
        echo ""
        echo "📍 Backend URL: $BACKEND_URL"
        echo "🏥 Health Check: $BACKEND_URL/health"
        echo "💬 API Endpoint: $BACKEND_URL/api/analyze"
        echo ""
        echo "🌐 Frontend will be available at your Firebase Hosting URL"
        echo ""
        echo "📝 Next Steps:"
        echo "1. Test your backend: curl $BACKEND_URL/health"
        echo "2. Check your Firebase Hosting URL in the console"
        echo "3. Test the complete application flow"
        echo ""
        echo "🔧 To update environment variables later:"
        echo "gcloud run services update market-analyst-backend \\"
        echo "  --set-env-vars=\"NEW_VAR=value\" \\"
        echo "  --region=us-central1"
    timeout: '60s'

# Required substitution variables
substitutions:
  _GEMINI_API_KEY: ''     # Set this in your Cloud Build trigger
  _SERPAPI_KEY: ''        # Set this in your Cloud Build trigger
  _FIREBASE_TOKEN: ''     # Get this from: firebase login:ci

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  timeout: '3600s'

# Optional: Define build timeout and resource allocation
timeout: '3600s'